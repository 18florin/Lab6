#include <iostream>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <vector>
#include <cmath>

bool is_prime(int n) {
    if (n < 2) return false;
    for (int i = 2; i <= std::sqrt(n); i++) {
        if (n % i == 0) return false;
    }
    return true;
}

void find_primes(int start, int end, int write_pipe) {
    std::vector<int> primes;
    for (int i = start; i <= end; i++) {
        if (is_prime(i)) {
            primes.push_back(i);
        }
    }
    write(write_pipe, primes.data(), primes.size() * sizeof(int));
    close(write_pipe);
}

int main() {
    int range = 10000;
    int interval = 1000;
    int num_processes = range / interval;

    int pipes[num_processes][2];
    pid_t pids[num_processes];

    for (int i = 0; i < num_processes; i++) {
        pipe(pipes[i]);
        pids[i] = fork();

        if (pids[i] == 0) { 
            close(pipes[i][0]); 
            find_primes(i * interval + 1, (i + 1) * interval, pipes[i][1]);
            exit(0);
        } else { 
            close(pipes[i][1]); 
        }
    }

    for (int i = 0; i < num_processes; i++) {
        waitpid(pids[i], nullptr, 0); 

        int primes[interval];
        int num_primes = read(pipes[i][0], primes, sizeof(primes)) / sizeof(int);
        close(pipes[i][0]);

        for (int j = 0; j < num_primes; j++) {
            std::cout << primes[j] << " ";
        }
    }

    return 0;
}
