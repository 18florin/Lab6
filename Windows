#include <windows.h>
#include <iostream>
#include <vector>
#include <cmath>
#include <string>

bool is_prime(int n) {
    if (n < 2) return false;
    for (int i = 2; i <= std::sqrt(n); i++) {
        if (n % i == 0) return false;
    }
    return true;
}

void find_primes(int start, int end, HANDLE writePipe) {
    std::vector<int> primes;
    for (int i = start; i <= end; i++) {
        if (is_prime(i)) {
            primes.push_back(i);
        }
    }
    DWORD bytesWritten;
    WriteFile(writePipe, primes.data(), primes.size() * sizeof(int), &bytesWritten, NULL);
    CloseHandle(writePipe);
}

int main() {
    const int range = 10000;
    const int interval = 1000;
    const int num_processes = range / interval;

    HANDLE pipes[num_processes][2];
    PROCESS_INFORMATION pi[num_processes];
    STARTUPINFO si[num_processes];

    for (int i = 0; i < num_processes; i++) {
        CreatePipe(&pipes[i][0], &pipes[i][1], NULL, 0);

        ZeroMemory(&si[i], sizeof(STARTUPINFO));
        si[i].cb = sizeof(STARTUPINFO);
        si[i].hStdOutput = pipes[i][1];
        si[i].dwFlags |= STARTF_USESTDHANDLES;

        std::string command = "child_process.exe " + std::to_string(i * interval + 1) + " " + std::to_string((i + 1) * interval);
        CreateProcess(NULL, const_cast<char*>(command.c_str()), NULL, NULL, TRUE, 0, NULL, NULL, &si[i], &pi[i]);
    }

    for (int i = 0; i < num_processes; i++) {
        WaitForSingleObject(pi[i].hProcess, INFINITE);
        CloseHandle(pipes[i][1]);

        int primes[interval];
        DWORD bytesRead;
        ReadFile(pipes[i][0], primes, sizeof(primes), &bytesRead, NULL);
        CloseHandle(pipes[i][0]);

        int num_primes = bytesRead / sizeof(int);
        for (int j = 0; j < num_primes; j++) {
            std::cout << primes[j] << " ";
        }
    }

    return 0;
}
